Instalación
La librebria de Pandas está contruida basada en NumPy, para evitar errores, primero instalemos NumPy.

!pip install numpy
!pip install pandas #Estas dos líneas instalan las librerías
Importando las librerías
import numpy as np
import pandas as pd #Estas dos líneas importan las librerías
Estructura de los datos
Panda soporta dataframes hasta de dos dimensiones
Objetos de una dimensión son llamados Series.
Objetos de dos dimensiones son llamados DataFrames.
La estructura de los datos son Rows (filas) y Columns (columnas).
Los básicos

Leer datos desde un documento
Puedes leer data en formato cvs, sql, json, html, entre otros.

df = pd.read_csv('file.csv') #Importa el documento
df = pd.read_csv('file.csv', index_col=0) #Toma la columna 0 como el índice
df = pd.read_html(url) #Importa HTML, necesitas tener BeautifulSoup para manipulación de datos

#Otras opciones
df = pd.read_json()
df = pd.read_sql()
df = pd.read_excel()
Guardar el DataFrame como archivo
df.to_csv('file_name.csv',index=False) #Esta opción guardará el DataFrame como csv sin índice indicado

#Opciones
df.to_json()
df.to_sql()
pd.to_excel()
pd.to_datetime
pd.to_timedelta
Atributos
df.columns #Regresa las columnas del DataFrame
df.dtypes #Regresa los tipos de datos
df.index #Regresa el indice
df.shape #Regresa la forma (cantidad de filas y columnas)
df.T #Regresa el DataFrame invertido (horizontal-vertical)
df.values #Regresa los valores
Combinaciones del DataFrame Join, Merge y Concat
Puedes leer toda la documentación aquí: https://pandas.pydata.org/pandas-docs/stable/user_guide/merging.html

Ajustes comunes

ignore_index = True- Cuando el indice no es relevante para la combinación
axis= 0: agrega en filas | axis= 1 agrega en columnas
keys = ['a', 'b', 'c']- agrega la data que está en llaves específicas
left join - Solo usa las llaves del DataFrame a la izquierda
right join - Usa llaves del DataFrame de la derecha
outer - Usa las llaves unidas contenidas en los dos DataFrames
inner - Usa la intersección de llaven en los dos dataframes
Si quieres modificar permanentemente el DataFrame, inplace=True necesita ser específicado.
df_1.join(df_2) #Esto mezcla los dos dataframes basado en el Indice - Deben tener el mismo indice

pd.concat([df_1, df_2], axis=1, join='outer', ignore_index=False, keys=None,
          levels=None, names=None, verify_integrity=False, copy=True)

df_1.pd.append(df_2, sort = True, inplace = True) 

dataframes = {'a': df_1, 'b': df_2, 'c': df_3}
new_df  = pd.concat(dataframes) 
pd.merge(left, right, how='inner', on=None, left_on=None, right_on=None,
         left_index=False, right_index=False, sort=True,
         suffixes=('_x', '_y'), copy=True, indicator=False,
         validate=None)
Creación de nuevas columnas
df['sum_col1_col2'] = df['col_1'] + df['col_2']
Explorar el DataFrame sin cambiar los valores permanentemente
Si deseas hacer algun cambio permanente, debes indicar (inplace = True)

df.head() #Regresa los primeros 5 valores

df.tail() #Regresa los últimos 5 valores
df['column_name'] #Regresa todos los valores de la columna específicada
df.column_name #Regresa todos los valores de la columna especificada
df['column_name', 'second_column'] #Regresa las columnas indicadas en un nuevo DataFrame
df[7:9] #Imprime las columnas indicadas por su número de índice
df.value_counts(dropna=True)  #Regresa todos los valores quitando los null values
df.sort_index(axis=0, ascending=False) #Returns dataframe sorted by index
df.apply(pd.Series.value_counts) #Regresa la suma de cada valor por columna
df.sort_values(by='column_name') #Regresa el DataFrame ordernado por la columna seleccionada
df.groupby('column_name').mean() #Regresa el DataFrame ordenado por la media de la columna seleccionada
df.pivot_table #PivotTable
df.iloc[0] #Selecciona el primer valor
df.loc['index_one'] #Seleccion basada en el index
df.iloc[0,:]  #Regresa la primera fila
df.iloc[0,0] #Regresa el primer elemento del DataFrame

#Algunos ejemplos que pueden ser adaptados como sea necesario

df[df['is_muy_value'] == 1][['what_im_looking_for']]

df[df['column_1'] < 10].groupby('column_2').mean()[['what_im_looking_for']]
df[df['column_1'] == 0].sort_values(by='column_2', ascending=False).head()
Remplazar y renombrar
df.columns = ['column_1', 'column_2'] #Renombra las columnas
df.rename(columns={'old_name': 'new_ name'}) #Selecciona las columnas y las renombra con el nuevo valor

df.replace(1,'one') #En este ejemplo reemplaza todos los valores 1 con one

df.replace([1,3],['one','three']) #Reemplaza los 1 por ‘one’ y los 3 por ‘three’


df.set_index('column_1') #Cambia el indice por la columna seleccionada
df.astype(int) # Convierte el tipo de dato

df['column_1'].astype(int) #cambia el tipo de dato de la columna seleccionada
Valores Nulos o Null y NaNs
isna isnull
notna notnull
df.fillna(value = 'my_selected_value', inplace = True) # Rellena todos los valores inexistentes permanentemente
df.fillna(x) # Reemplaza todos los valores inexistentes con una X
df.notna().sum() #Suma todos los valores que no son NA 
df.interpolate()
df.isna().sum() #Regresa todos los valores que son NA
df.isnull()
df.dropna(inplace = True) # Suelta o elimina los valores Na de forma permanente
df.isnull().sum() #Imprime los valores nulos por columna
df.isnull().sum()[df.isnull().sum() !=0].sort_values().plot(kind='barh'); #Grafíca los valores nulos por columna
df.fillna(df.mean()) #Reemplaza los NAs con la media de los numeros

#Otra forma de sobreescribir en el DataFrame sin los valores nulos o inexistentes en ciertas columnas

df.column.fillna(value='no_info', inplace=True) 
df= df.loc[df['column'] != 'no_info']
'Dropping' - Soltar
df.drop(['column_1', 'column_2'], axis=1, inplace = True) #Suelta los valores de columnas específicas
df.drop_duplicates(inplace=True) #Suelta los valores duplicados permanentemente
df.drop('row_1', axis=0, inplace = True) #Suelta una columna de forma permanente
Métodos estadísticos
Puedem ser usados en conjunto con df.sum y df.sum()

df.describe() #Regresa las estadísticas de un DataFrame
df.max() #Regresa el valor máximo
df.mean() #Regresa la media
df.median() #Regresa la mediana
df.min() # Regresa el valor mínimo de cada columna
df.mode() #Regresa la moda
df.std() # Regresa la desviación estándar de cada columna
df.var() #Regresa la varianza
df.abs() #Regresa los valores absolutos
df.corr() #Regresa las correlaciones en un DataFrame
df.round() #Redondea los números
Más que explorar
df.clip()
df.nunique() 
df.idxmax()
df.idxmin()
df.cov()
df.cummax()
df.cummin()
df.cumprod()
df.cumsum()
df.diff()
df.nlargest()
df.nsmallest()
df.pct_change()
df.prod()
df.quantile()
df.rank()
Variables Dummy
https://socialresearchmethods.net/kb/dummyvar.php

df = pd.get_dummies(df, columns=['my_column'], drop_first=True)
#Cuando hacemos valiables dummies, soltamos la primera columna para que no sea redundante
Ejemplos en código
#Exploración de datos inicial
def df_EDA(df):
    print('SHAPE:', df.shape)
    print('----------------')
    print('SUM OF NULL VALUES:', df.isnull().sum())
    print('----------------')
    print('DATA TYPES:')
    print(df.dtypes)
    print('----------------')
    print('DESCRIPTIVE STATISTICS:')
    return df.describe().T

df_EDA(your_df)
#Esta columna tiene el valor que estoy buscando?
def is_the_value_im_looking(i):
    val = i.split()
    if 'value' in str(val):
        return 1
else:
        return 0
    
#Crea un columna llamada como el valor que estoy buscando
df['value'] = df['col_1'].apply(is_the_value_im_looking)
#Extrae el titulo de cada nombre y crea las variables dummies con comprensión de listas
#TPuede adaptarse como sea necesario

df['Title'] = [each.split(',')[1].split('.')[0].strip() for each in df['Name']]
#Rate por columna 
#Puede adaptarse como sea necesario.

for i in ['column_1', 'column_2', 'column_3']:
    print(i, ':')
    print(df[df[i] == 1][['the_value_im_lookingfor']].mean())
    print()
Graficando
Ejemplos de graficación

df.isnull().sum()[df.isnull().sum() !=0].sort_values().plot(kind='barh'); #Grafíca los valores nulos por columna
df.groupby('column_1').mean()[['value']].plot(kind='barh')
plt.title('Nombre de la gráfica');
df.groupby(['column_1', 'colum_2']).mean()[['value']].plot(kind='barh');
Cambiar los tipos de datos